input AuthChange {
  token: String!
  password: String!
}

input CardUpdateInput {
  token: String!
  cardId: ID!
}

type AuthPayload {
  token: String!
  user: User!
}

type AuthPayloadEmp {
  token: String!
  employee: Employee!
}

input generateShowInput {
  date: String!
  movieId: ID!
  roomNum: Int!
  roomType: RoomType!
}

type generateShowAnswer {
  id: ID
  show: Show
  message: String!
}

input prodNQuan {
  name: String
  quantity: Int
}

input generatePurchaseInput {
  showId: ID
  seats: [String]
  products: [prodNQuan]
  token: String
  usePoints: Boolean
  cinemaId: ID!
}

type generatePurchaseAnswer {
  id: ID
  purchase: Purchase
  message: String!
}

type askSalaryAnswer {
  employee: Employee
  message: String!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  updatePassword(data: AuthChange!): User!
  updateMyCard(data: CardUpdateInput!): User!

  signupEmp(email: String!, password: String!, name: String!, area: String!, status: String!, empNum: Int!, token: String!): AuthPayloadEmp!
  loginEmp(empNum: Int!, password: String!): AuthPayloadEmp!
  changeEmpStatus(status: String, empNum: Int!, token: String!): Employee!
  changeEmpInfo(password: String, area: String, empNum: Int!, token: String!): Employee!
  assignEmpToCinema(empNum: Int!, cinemaId: ID!, token: String!): Cinema!
  askSalary(token: String!): askSalaryAnswer!

  cancelCard(token: String!, cardID: ID!): Card!

  generateProduct(token: String!, data: ProductCreateInput!): Product!
  editProduct(token: String!, data: ProductUpdateInput!): Product!
  removeProduct(token: String!, productId: ID!): Product!

  generateMovie(token: String!, data: MovieCreateInput!): Movie!
  editMovie(token: String!, data: MovieUpdateInput!): Movie!
  removeMovie(token: String!, cinemaId: ID!): Movie!

  generateShow(token: String!, data: generateShowInput!): generateShowAnswer!
  removeShow(token: String!, showId: ID!): Show!

  generatePurchase(data: generatePurchaseInput!): generatePurchaseAnswer!
}

type Query {
  viewProfile(token: String!): User!
  viewCardStatus(token: String!): Card!
  
  viewProfileEmp(token: String!): Employee!

  cinemaFinancesBrief(cinemaId: ID!, token: String!): String!
  cinemas(token: String!): [Cinema]
  cinema(token: String!): Cinema

  shows(token: String!): [Show]
  show(token: String!): Show

  movies(token: String!): [Movie]
  movie(token: String!): Movie

  products(token: String!): [Product]
  product(token: String!): Product
}

type Subscription {
  feedSubscription: User
}