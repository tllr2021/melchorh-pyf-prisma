input AuthChange {
  token: String!
  password: String!
}

input CardUpdateInput {
  token: String!
  cardId: ID!
}

type AuthPayload {
  token: String!
  user: User!
}

type Mutation {
  updatePassword(data: AuthChange!): User!
  updateMyCard(data: CardUpdateInput!): User!
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type Query {
  viewProfile(token: String!): User!
  viewCardStatus(token: String!): Card!
}

input generateRoomInput {
  roomNum: Int!
  roomType: RoomType!
}

type generateRoomAnswer {
  id: ID
  room: Room
  message: String!
}

type Mutation {
  generateRoom(data: generateRoomInput!): generateRoomAnswer!
}

input generateShowInput {
  date: String!
  movieId: ID!
  roomNum: Int!
  roomType: RoomType!
}

type generateShowAnswer {
  id: ID
  show: Show
  message: String!
}

type Mutation {
  generateShow(data: generateShowInput!): generateShowAnswer!
}

input prodNQuan {
  name: String
  quantity: Int
}

input generatePurchaseInput {
  showId: ID
  seats: [String]
  products: [prodNQuan]
  token: String
  usePoints: Boolean
}

type generatePurchaseAnswer {
  id: ID
  purchase: Purchase
  message: String!
}

type Mutation {
  generatePurchase(data: generatePurchaseInput!): generatePurchaseAnswer!
}

type Subscription {
  feedSubscription: User
}