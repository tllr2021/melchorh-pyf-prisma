// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  actor: (where?: ActorWhereInput) => Promise<boolean>;
  director: (where?: DirectorWhereInput) => Promise<boolean>;
  movie: (where?: MovieWhereInput) => Promise<boolean>;
  purchase: (where?: PurchaseWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  seat: (where?: SeatWhereInput) => Promise<boolean>;
  show: (where?: ShowWhereInput) => Promise<boolean>;
  ticket: (where?: TicketWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  actor: (where: ActorWhereUniqueInput) => ActorNullablePromise;
  actors: (args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Actor>;
  actorsConnection: (args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActorConnectionPromise;
  director: (where: DirectorWhereUniqueInput) => DirectorNullablePromise;
  directors: (args?: {
    where?: DirectorWhereInput;
    orderBy?: DirectorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Director>;
  directorsConnection: (args?: {
    where?: DirectorWhereInput;
    orderBy?: DirectorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DirectorConnectionPromise;
  movie: (where: MovieWhereUniqueInput) => MovieNullablePromise;
  movies: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Movie>;
  moviesConnection: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MovieConnectionPromise;
  purchase: (where: PurchaseWhereUniqueInput) => PurchaseNullablePromise;
  purchases: (args?: {
    where?: PurchaseWhereInput;
    orderBy?: PurchaseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Purchase>;
  purchasesConnection: (args?: {
    where?: PurchaseWhereInput;
    orderBy?: PurchaseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PurchaseConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  seat: (where: SeatWhereUniqueInput) => SeatNullablePromise;
  seats: (args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Seat>;
  seatsConnection: (args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SeatConnectionPromise;
  show: (where: ShowWhereUniqueInput) => ShowNullablePromise;
  shows: (args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Show>;
  showsConnection: (args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShowConnectionPromise;
  ticket: (where: TicketWhereUniqueInput) => TicketNullablePromise;
  tickets: (args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ticket>;
  ticketsConnection: (args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TicketConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActor: (data: ActorCreateInput) => ActorPromise;
  updateActor: (args: {
    data: ActorUpdateInput;
    where: ActorWhereUniqueInput;
  }) => ActorPromise;
  updateManyActors: (args: {
    data: ActorUpdateManyMutationInput;
    where?: ActorWhereInput;
  }) => BatchPayloadPromise;
  upsertActor: (args: {
    where: ActorWhereUniqueInput;
    create: ActorCreateInput;
    update: ActorUpdateInput;
  }) => ActorPromise;
  deleteActor: (where: ActorWhereUniqueInput) => ActorPromise;
  deleteManyActors: (where?: ActorWhereInput) => BatchPayloadPromise;
  createDirector: (data: DirectorCreateInput) => DirectorPromise;
  updateDirector: (args: {
    data: DirectorUpdateInput;
    where: DirectorWhereUniqueInput;
  }) => DirectorPromise;
  updateManyDirectors: (args: {
    data: DirectorUpdateManyMutationInput;
    where?: DirectorWhereInput;
  }) => BatchPayloadPromise;
  upsertDirector: (args: {
    where: DirectorWhereUniqueInput;
    create: DirectorCreateInput;
    update: DirectorUpdateInput;
  }) => DirectorPromise;
  deleteDirector: (where: DirectorWhereUniqueInput) => DirectorPromise;
  deleteManyDirectors: (where?: DirectorWhereInput) => BatchPayloadPromise;
  createMovie: (data: MovieCreateInput) => MoviePromise;
  updateMovie: (args: {
    data: MovieUpdateInput;
    where: MovieWhereUniqueInput;
  }) => MoviePromise;
  updateManyMovies: (args: {
    data: MovieUpdateManyMutationInput;
    where?: MovieWhereInput;
  }) => BatchPayloadPromise;
  upsertMovie: (args: {
    where: MovieWhereUniqueInput;
    create: MovieCreateInput;
    update: MovieUpdateInput;
  }) => MoviePromise;
  deleteMovie: (where: MovieWhereUniqueInput) => MoviePromise;
  deleteManyMovies: (where?: MovieWhereInput) => BatchPayloadPromise;
  createPurchase: (data: PurchaseCreateInput) => PurchasePromise;
  updatePurchase: (args: {
    data: PurchaseUpdateInput;
    where: PurchaseWhereUniqueInput;
  }) => PurchasePromise;
  updateManyPurchases: (args: {
    data: PurchaseUpdateManyMutationInput;
    where?: PurchaseWhereInput;
  }) => BatchPayloadPromise;
  upsertPurchase: (args: {
    where: PurchaseWhereUniqueInput;
    create: PurchaseCreateInput;
    update: PurchaseUpdateInput;
  }) => PurchasePromise;
  deletePurchase: (where: PurchaseWhereUniqueInput) => PurchasePromise;
  deleteManyPurchases: (where?: PurchaseWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  updateManyRooms: (args: {
    data: RoomUpdateManyMutationInput;
    where?: RoomWhereInput;
  }) => BatchPayloadPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createSeat: (data: SeatCreateInput) => SeatPromise;
  updateSeat: (args: {
    data: SeatUpdateInput;
    where: SeatWhereUniqueInput;
  }) => SeatPromise;
  updateManySeats: (args: {
    data: SeatUpdateManyMutationInput;
    where?: SeatWhereInput;
  }) => BatchPayloadPromise;
  upsertSeat: (args: {
    where: SeatWhereUniqueInput;
    create: SeatCreateInput;
    update: SeatUpdateInput;
  }) => SeatPromise;
  deleteSeat: (where: SeatWhereUniqueInput) => SeatPromise;
  deleteManySeats: (where?: SeatWhereInput) => BatchPayloadPromise;
  createShow: (data: ShowCreateInput) => ShowPromise;
  updateShow: (args: {
    data: ShowUpdateInput;
    where: ShowWhereUniqueInput;
  }) => ShowPromise;
  updateManyShows: (args: {
    data: ShowUpdateManyMutationInput;
    where?: ShowWhereInput;
  }) => BatchPayloadPromise;
  upsertShow: (args: {
    where: ShowWhereUniqueInput;
    create: ShowCreateInput;
    update: ShowUpdateInput;
  }) => ShowPromise;
  deleteShow: (where: ShowWhereUniqueInput) => ShowPromise;
  deleteManyShows: (where?: ShowWhereInput) => BatchPayloadPromise;
  createTicket: (data: TicketCreateInput) => TicketPromise;
  updateTicket: (args: {
    data: TicketUpdateInput;
    where: TicketWhereUniqueInput;
  }) => TicketPromise;
  updateManyTickets: (args: {
    data: TicketUpdateManyMutationInput;
    where?: TicketWhereInput;
  }) => BatchPayloadPromise;
  upsertTicket: (args: {
    where: TicketWhereUniqueInput;
    create: TicketCreateInput;
    update: TicketUpdateInput;
  }) => TicketPromise;
  deleteTicket: (where: TicketWhereUniqueInput) => TicketPromise;
  deleteManyTickets: (where?: TicketWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  actor: (
    where?: ActorSubscriptionWhereInput
  ) => ActorSubscriptionPayloadSubscription;
  director: (
    where?: DirectorSubscriptionWhereInput
  ) => DirectorSubscriptionPayloadSubscription;
  movie: (
    where?: MovieSubscriptionWhereInput
  ) => MovieSubscriptionPayloadSubscription;
  purchase: (
    where?: PurchaseSubscriptionWhereInput
  ) => PurchaseSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  seat: (
    where?: SeatSubscriptionWhereInput
  ) => SeatSubscriptionPayloadSubscription;
  show: (
    where?: ShowSubscriptionWhereInput
  ) => ShowSubscriptionPayloadSubscription;
  ticket: (
    where?: TicketSubscriptionWhereInput
  ) => TicketSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActorOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type DirectorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type MovieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "year_ASC"
  | "year_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "class_ASC"
  | "class_DESC";

export type PurchaseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "numTickets_ASC"
  | "numTickets_DESC"
  | "total_ASC"
  | "total_DESC";

export type RoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "roomType_ASC"
  | "roomType_DESC"
  | "seatNum_ASC"
  | "seatNum_DESC";

export type SeatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "available_ASC"
  | "available_DESC";

export type ShowOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "showType_ASC"
  | "showType_DESC";

export type TicketOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "cardNumber_ASC"
  | "cardNumber_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ActorWhereInput[] | ActorWhereInput>;
}

export type DirectorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DirectorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<DirectorWhereInput[] | DirectorWhereInput>;
}

export type MovieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MovieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  director?: Maybe<DirectorWhereInput>;
  actors_some?: Maybe<ActorWhereInput>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  class?: Maybe<String>;
  class_not?: Maybe<String>;
  class_in?: Maybe<String[] | String>;
  class_not_in?: Maybe<String[] | String>;
  class_lt?: Maybe<String>;
  class_lte?: Maybe<String>;
  class_gt?: Maybe<String>;
  class_gte?: Maybe<String>;
  class_contains?: Maybe<String>;
  class_not_contains?: Maybe<String>;
  class_starts_with?: Maybe<String>;
  class_not_starts_with?: Maybe<String>;
  class_ends_with?: Maybe<String>;
  class_not_ends_with?: Maybe<String>;
  AND?: Maybe<MovieWhereInput[] | MovieWhereInput>;
}

export type PurchaseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PurchaseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  numTickets?: Maybe<Int>;
  numTickets_not?: Maybe<Int>;
  numTickets_in?: Maybe<Int[] | Int>;
  numTickets_not_in?: Maybe<Int[] | Int>;
  numTickets_lt?: Maybe<Int>;
  numTickets_lte?: Maybe<Int>;
  numTickets_gt?: Maybe<Int>;
  numTickets_gte?: Maybe<Int>;
  total?: Maybe<Float>;
  total_not?: Maybe<Float>;
  total_in?: Maybe<Float[] | Float>;
  total_not_in?: Maybe<Float[] | Float>;
  total_lt?: Maybe<Float>;
  total_lte?: Maybe<Float>;
  total_gt?: Maybe<Float>;
  total_gte?: Maybe<Float>;
  seat?: Maybe<SeatWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<PurchaseWhereInput[] | PurchaseWhereInput>;
}

export interface SeatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  room?: Maybe<RoomWhereInput>;
  AND?: Maybe<SeatWhereInput[] | SeatWhereInput>;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  roomType?: Maybe<String>;
  roomType_not?: Maybe<String>;
  roomType_in?: Maybe<String[] | String>;
  roomType_not_in?: Maybe<String[] | String>;
  roomType_lt?: Maybe<String>;
  roomType_lte?: Maybe<String>;
  roomType_gt?: Maybe<String>;
  roomType_gte?: Maybe<String>;
  roomType_contains?: Maybe<String>;
  roomType_not_contains?: Maybe<String>;
  roomType_starts_with?: Maybe<String>;
  roomType_not_starts_with?: Maybe<String>;
  roomType_ends_with?: Maybe<String>;
  roomType_not_ends_with?: Maybe<String>;
  seatNum?: Maybe<Int>;
  seatNum_not?: Maybe<Int>;
  seatNum_in?: Maybe<Int[] | Int>;
  seatNum_not_in?: Maybe<Int[] | Int>;
  seatNum_lt?: Maybe<Int>;
  seatNum_lte?: Maybe<Int>;
  seatNum_gt?: Maybe<Int>;
  seatNum_gte?: Maybe<Int>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  cardNumber?: Maybe<String>;
  cardNumber_not?: Maybe<String>;
  cardNumber_in?: Maybe<String[] | String>;
  cardNumber_not_in?: Maybe<String[] | String>;
  cardNumber_lt?: Maybe<String>;
  cardNumber_lte?: Maybe<String>;
  cardNumber_gt?: Maybe<String>;
  cardNumber_gte?: Maybe<String>;
  cardNumber_contains?: Maybe<String>;
  cardNumber_not_contains?: Maybe<String>;
  cardNumber_starts_with?: Maybe<String>;
  cardNumber_not_starts_with?: Maybe<String>;
  cardNumber_ends_with?: Maybe<String>;
  cardNumber_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SeatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ShowWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ShowWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  movie?: Maybe<MovieWhereInput>;
  showType?: Maybe<String>;
  showType_not?: Maybe<String>;
  showType_in?: Maybe<String[] | String>;
  showType_not_in?: Maybe<String[] | String>;
  showType_lt?: Maybe<String>;
  showType_lte?: Maybe<String>;
  showType_gt?: Maybe<String>;
  showType_gte?: Maybe<String>;
  showType_contains?: Maybe<String>;
  showType_not_contains?: Maybe<String>;
  showType_starts_with?: Maybe<String>;
  showType_not_starts_with?: Maybe<String>;
  showType_ends_with?: Maybe<String>;
  showType_not_ends_with?: Maybe<String>;
  AND?: Maybe<ShowWhereInput[] | ShowWhereInput>;
}

export type TicketWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TicketWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  show?: Maybe<ShowWhereInput>;
  room?: Maybe<RoomWhereInput>;
  seat?: Maybe<SeatWhereInput>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  AND?: Maybe<TicketWhereInput[] | TicketWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  cardNumber?: Maybe<String>;
}>;

export interface ActorCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ActorUpdateInput {
  name?: Maybe<String>;
}

export interface ActorUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface DirectorCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface DirectorUpdateInput {
  name?: Maybe<String>;
}

export interface DirectorUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface MovieCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  year: Int;
  summary: String;
  director: DirectorCreateOneInput;
  actors?: Maybe<ActorCreateManyInput>;
  gender: String;
  class: String;
}

export interface DirectorCreateOneInput {
  create?: Maybe<DirectorCreateInput>;
  connect?: Maybe<DirectorWhereUniqueInput>;
}

export interface ActorCreateManyInput {
  create?: Maybe<ActorCreateInput[] | ActorCreateInput>;
  connect?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
}

export interface MovieUpdateInput {
  title?: Maybe<String>;
  year?: Maybe<Int>;
  summary?: Maybe<String>;
  director?: Maybe<DirectorUpdateOneRequiredInput>;
  actors?: Maybe<ActorUpdateManyInput>;
  gender?: Maybe<String>;
  class?: Maybe<String>;
}

export interface DirectorUpdateOneRequiredInput {
  create?: Maybe<DirectorCreateInput>;
  update?: Maybe<DirectorUpdateDataInput>;
  upsert?: Maybe<DirectorUpsertNestedInput>;
  connect?: Maybe<DirectorWhereUniqueInput>;
}

export interface DirectorUpdateDataInput {
  name?: Maybe<String>;
}

export interface DirectorUpsertNestedInput {
  update: DirectorUpdateDataInput;
  create: DirectorCreateInput;
}

export interface ActorUpdateManyInput {
  create?: Maybe<ActorCreateInput[] | ActorCreateInput>;
  update?: Maybe<
    | ActorUpdateWithWhereUniqueNestedInput[]
    | ActorUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ActorUpsertWithWhereUniqueNestedInput[]
    | ActorUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  connect?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  set?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  disconnect?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  deleteMany?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
  updateMany?: Maybe<
    ActorUpdateManyWithWhereNestedInput[] | ActorUpdateManyWithWhereNestedInput
  >;
}

export interface ActorUpdateWithWhereUniqueNestedInput {
  where: ActorWhereUniqueInput;
  data: ActorUpdateDataInput;
}

export interface ActorUpdateDataInput {
  name?: Maybe<String>;
}

export interface ActorUpsertWithWhereUniqueNestedInput {
  where: ActorWhereUniqueInput;
  update: ActorUpdateDataInput;
  create: ActorCreateInput;
}

export interface ActorScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
  OR?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
  NOT?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
}

export interface ActorUpdateManyWithWhereNestedInput {
  where: ActorScalarWhereInput;
  data: ActorUpdateManyDataInput;
}

export interface ActorUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface MovieUpdateManyMutationInput {
  title?: Maybe<String>;
  year?: Maybe<Int>;
  summary?: Maybe<String>;
  gender?: Maybe<String>;
  class?: Maybe<String>;
}

export interface PurchaseCreateInput {
  id?: Maybe<ID_Input>;
  numTickets: Int;
  total: Float;
  seat: SeatCreateOneInput;
  user?: Maybe<UserCreateOneInput>;
}

export interface SeatCreateOneInput {
  create?: Maybe<SeatCreateInput>;
  connect?: Maybe<SeatWhereUniqueInput>;
}

export interface SeatCreateInput {
  id?: Maybe<ID_Input>;
  available?: Maybe<Boolean>;
  room: RoomCreateOneInput;
}

export interface RoomCreateOneInput {
  create?: Maybe<RoomCreateInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  roomType: String;
  seatNum: Int;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password?: Maybe<String>;
  name: String;
  cardNumber: String;
}

export interface PurchaseUpdateInput {
  numTickets?: Maybe<Int>;
  total?: Maybe<Float>;
  seat?: Maybe<SeatUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface SeatUpdateOneRequiredInput {
  create?: Maybe<SeatCreateInput>;
  update?: Maybe<SeatUpdateDataInput>;
  upsert?: Maybe<SeatUpsertNestedInput>;
  connect?: Maybe<SeatWhereUniqueInput>;
}

export interface SeatUpdateDataInput {
  available?: Maybe<Boolean>;
  room?: Maybe<RoomUpdateOneRequiredInput>;
}

export interface RoomUpdateOneRequiredInput {
  create?: Maybe<RoomCreateInput>;
  update?: Maybe<RoomUpdateDataInput>;
  upsert?: Maybe<RoomUpsertNestedInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateDataInput {
  roomType?: Maybe<String>;
  seatNum?: Maybe<Int>;
}

export interface RoomUpsertNestedInput {
  update: RoomUpdateDataInput;
  create: RoomCreateInput;
}

export interface SeatUpsertNestedInput {
  update: SeatUpdateDataInput;
  create: SeatCreateInput;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  cardNumber?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PurchaseUpdateManyMutationInput {
  numTickets?: Maybe<Int>;
  total?: Maybe<Float>;
}

export interface RoomUpdateInput {
  roomType?: Maybe<String>;
  seatNum?: Maybe<Int>;
}

export interface RoomUpdateManyMutationInput {
  roomType?: Maybe<String>;
  seatNum?: Maybe<Int>;
}

export interface SeatUpdateInput {
  available?: Maybe<Boolean>;
  room?: Maybe<RoomUpdateOneRequiredInput>;
}

export interface SeatUpdateManyMutationInput {
  available?: Maybe<Boolean>;
}

export interface ShowCreateInput {
  id?: Maybe<ID_Input>;
  date: DateTimeInput;
  movie: MovieCreateOneInput;
  showType: String;
}

export interface MovieCreateOneInput {
  create?: Maybe<MovieCreateInput>;
  connect?: Maybe<MovieWhereUniqueInput>;
}

export interface ShowUpdateInput {
  date?: Maybe<DateTimeInput>;
  movie?: Maybe<MovieUpdateOneRequiredInput>;
  showType?: Maybe<String>;
}

export interface MovieUpdateOneRequiredInput {
  create?: Maybe<MovieCreateInput>;
  update?: Maybe<MovieUpdateDataInput>;
  upsert?: Maybe<MovieUpsertNestedInput>;
  connect?: Maybe<MovieWhereUniqueInput>;
}

export interface MovieUpdateDataInput {
  title?: Maybe<String>;
  year?: Maybe<Int>;
  summary?: Maybe<String>;
  director?: Maybe<DirectorUpdateOneRequiredInput>;
  actors?: Maybe<ActorUpdateManyInput>;
  gender?: Maybe<String>;
  class?: Maybe<String>;
}

export interface MovieUpsertNestedInput {
  update: MovieUpdateDataInput;
  create: MovieCreateInput;
}

export interface ShowUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  showType?: Maybe<String>;
}

export interface TicketCreateInput {
  id?: Maybe<ID_Input>;
  show: ShowCreateOneInput;
  room: RoomCreateOneInput;
  seat: SeatCreateOneInput;
  price: Float;
}

export interface ShowCreateOneInput {
  create?: Maybe<ShowCreateInput>;
  connect?: Maybe<ShowWhereUniqueInput>;
}

export interface TicketUpdateInput {
  show?: Maybe<ShowUpdateOneRequiredInput>;
  room?: Maybe<RoomUpdateOneRequiredInput>;
  seat?: Maybe<SeatUpdateOneRequiredInput>;
  price?: Maybe<Float>;
}

export interface ShowUpdateOneRequiredInput {
  create?: Maybe<ShowCreateInput>;
  update?: Maybe<ShowUpdateDataInput>;
  upsert?: Maybe<ShowUpsertNestedInput>;
  connect?: Maybe<ShowWhereUniqueInput>;
}

export interface ShowUpdateDataInput {
  date?: Maybe<DateTimeInput>;
  movie?: Maybe<MovieUpdateOneRequiredInput>;
  showType?: Maybe<String>;
}

export interface ShowUpsertNestedInput {
  update: ShowUpdateDataInput;
  create: ShowCreateInput;
}

export interface TicketUpdateManyMutationInput {
  price?: Maybe<Float>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  cardNumber?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  cardNumber?: Maybe<String>;
}

export interface ActorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActorWhereInput>;
  AND?: Maybe<ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput>;
}

export interface DirectorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DirectorWhereInput>;
  AND?: Maybe<
    DirectorSubscriptionWhereInput[] | DirectorSubscriptionWhereInput
  >;
}

export interface MovieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MovieWhereInput>;
  AND?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
}

export interface PurchaseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PurchaseWhereInput>;
  AND?: Maybe<
    PurchaseSubscriptionWhereInput[] | PurchaseSubscriptionWhereInput
  >;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface SeatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SeatWhereInput>;
  AND?: Maybe<SeatSubscriptionWhereInput[] | SeatSubscriptionWhereInput>;
}

export interface ShowSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShowWhereInput>;
  AND?: Maybe<ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput>;
}

export interface TicketSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TicketWhereInput>;
  AND?: Maybe<TicketSubscriptionWhereInput[] | TicketSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Actor {
  id: ID_Output;
  name: String;
}

export interface ActorPromise extends Promise<Actor>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ActorSubscription
  extends Promise<AsyncIterator<Actor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ActorNullablePromise
  extends Promise<Actor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ActorConnection {
  pageInfo: PageInfo;
  edges: ActorEdge[];
}

export interface ActorConnectionPromise
  extends Promise<ActorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActorEdge>>() => T;
  aggregate: <T = AggregateActorPromise>() => T;
}

export interface ActorConnectionSubscription
  extends Promise<AsyncIterator<ActorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActorSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActorEdge {
  node: Actor;
  cursor: String;
}

export interface ActorEdgePromise extends Promise<ActorEdge>, Fragmentable {
  node: <T = ActorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActorEdgeSubscription
  extends Promise<AsyncIterator<ActorEdge>>,
    Fragmentable {
  node: <T = ActorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActor {
  count: Int;
}

export interface AggregateActorPromise
  extends Promise<AggregateActor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActorSubscription
  extends Promise<AsyncIterator<AggregateActor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Director {
  id: ID_Output;
  name: String;
}

export interface DirectorPromise extends Promise<Director>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DirectorSubscription
  extends Promise<AsyncIterator<Director>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DirectorNullablePromise
  extends Promise<Director | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DirectorConnection {
  pageInfo: PageInfo;
  edges: DirectorEdge[];
}

export interface DirectorConnectionPromise
  extends Promise<DirectorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DirectorEdge>>() => T;
  aggregate: <T = AggregateDirectorPromise>() => T;
}

export interface DirectorConnectionSubscription
  extends Promise<AsyncIterator<DirectorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DirectorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDirectorSubscription>() => T;
}

export interface DirectorEdge {
  node: Director;
  cursor: String;
}

export interface DirectorEdgePromise
  extends Promise<DirectorEdge>,
    Fragmentable {
  node: <T = DirectorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DirectorEdgeSubscription
  extends Promise<AsyncIterator<DirectorEdge>>,
    Fragmentable {
  node: <T = DirectorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDirector {
  count: Int;
}

export interface AggregateDirectorPromise
  extends Promise<AggregateDirector>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDirectorSubscription
  extends Promise<AsyncIterator<AggregateDirector>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Movie {
  id: ID_Output;
  title: String;
  year: Int;
  summary: String;
  gender: String;
  class: String;
}

export interface MoviePromise extends Promise<Movie>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<Int>;
  summary: () => Promise<String>;
  director: <T = DirectorPromise>() => T;
  actors: <T = FragmentableArray<Actor>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<String>;
  class: () => Promise<String>;
}

export interface MovieSubscription
  extends Promise<AsyncIterator<Movie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  summary: () => Promise<AsyncIterator<String>>;
  director: <T = DirectorSubscription>() => T;
  actors: <T = Promise<AsyncIterator<ActorSubscription>>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<AsyncIterator<String>>;
  class: () => Promise<AsyncIterator<String>>;
}

export interface MovieNullablePromise
  extends Promise<Movie | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<Int>;
  summary: () => Promise<String>;
  director: <T = DirectorPromise>() => T;
  actors: <T = FragmentableArray<Actor>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<String>;
  class: () => Promise<String>;
}

export interface MovieConnection {
  pageInfo: PageInfo;
  edges: MovieEdge[];
}

export interface MovieConnectionPromise
  extends Promise<MovieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MovieEdge>>() => T;
  aggregate: <T = AggregateMoviePromise>() => T;
}

export interface MovieConnectionSubscription
  extends Promise<AsyncIterator<MovieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieSubscription>() => T;
}

export interface MovieEdge {
  node: Movie;
  cursor: String;
}

export interface MovieEdgePromise extends Promise<MovieEdge>, Fragmentable {
  node: <T = MoviePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MovieEdgeSubscription
  extends Promise<AsyncIterator<MovieEdge>>,
    Fragmentable {
  node: <T = MovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMovie {
  count: Int;
}

export interface AggregateMoviePromise
  extends Promise<AggregateMovie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieSubscription
  extends Promise<AsyncIterator<AggregateMovie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Purchase {
  id: ID_Output;
  numTickets: Int;
  total: Float;
}

export interface PurchasePromise extends Promise<Purchase>, Fragmentable {
  id: () => Promise<ID_Output>;
  numTickets: () => Promise<Int>;
  total: () => Promise<Float>;
  seat: <T = SeatPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface PurchaseSubscription
  extends Promise<AsyncIterator<Purchase>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  numTickets: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Float>>;
  seat: <T = SeatSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface PurchaseNullablePromise
  extends Promise<Purchase | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  numTickets: () => Promise<Int>;
  total: () => Promise<Float>;
  seat: <T = SeatPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface Seat {
  id: ID_Output;
  available: Boolean;
}

export interface SeatPromise extends Promise<Seat>, Fragmentable {
  id: () => Promise<ID_Output>;
  available: () => Promise<Boolean>;
  room: <T = RoomPromise>() => T;
}

export interface SeatSubscription
  extends Promise<AsyncIterator<Seat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  room: <T = RoomSubscription>() => T;
}

export interface SeatNullablePromise
  extends Promise<Seat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  available: () => Promise<Boolean>;
  room: <T = RoomPromise>() => T;
}

export interface Room {
  id: ID_Output;
  roomType: String;
  seatNum: Int;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  roomType: () => Promise<String>;
  seatNum: () => Promise<Int>;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  roomType: () => Promise<AsyncIterator<String>>;
  seatNum: () => Promise<AsyncIterator<Int>>;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  roomType: () => Promise<String>;
  seatNum: () => Promise<Int>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password?: String;
  name: String;
  cardNumber: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  cardNumber: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  cardNumber: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  cardNumber: () => Promise<String>;
}

export interface PurchaseConnection {
  pageInfo: PageInfo;
  edges: PurchaseEdge[];
}

export interface PurchaseConnectionPromise
  extends Promise<PurchaseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PurchaseEdge>>() => T;
  aggregate: <T = AggregatePurchasePromise>() => T;
}

export interface PurchaseConnectionSubscription
  extends Promise<AsyncIterator<PurchaseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PurchaseEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePurchaseSubscription>() => T;
}

export interface PurchaseEdge {
  node: Purchase;
  cursor: String;
}

export interface PurchaseEdgePromise
  extends Promise<PurchaseEdge>,
    Fragmentable {
  node: <T = PurchasePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PurchaseEdgeSubscription
  extends Promise<AsyncIterator<PurchaseEdge>>,
    Fragmentable {
  node: <T = PurchaseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePurchase {
  count: Int;
}

export interface AggregatePurchasePromise
  extends Promise<AggregatePurchase>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePurchaseSubscription
  extends Promise<AsyncIterator<AggregatePurchase>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeatConnection {
  pageInfo: PageInfo;
  edges: SeatEdge[];
}

export interface SeatConnectionPromise
  extends Promise<SeatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeatEdge>>() => T;
  aggregate: <T = AggregateSeatPromise>() => T;
}

export interface SeatConnectionSubscription
  extends Promise<AsyncIterator<SeatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeatSubscription>() => T;
}

export interface SeatEdge {
  node: Seat;
  cursor: String;
}

export interface SeatEdgePromise extends Promise<SeatEdge>, Fragmentable {
  node: <T = SeatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeatEdgeSubscription
  extends Promise<AsyncIterator<SeatEdge>>,
    Fragmentable {
  node: <T = SeatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeat {
  count: Int;
}

export interface AggregateSeatPromise
  extends Promise<AggregateSeat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeatSubscription
  extends Promise<AsyncIterator<AggregateSeat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Show {
  id: ID_Output;
  date: DateTimeOutput;
  showType: String;
}

export interface ShowPromise extends Promise<Show>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  movie: <T = MoviePromise>() => T;
  showType: () => Promise<String>;
}

export interface ShowSubscription
  extends Promise<AsyncIterator<Show>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  movie: <T = MovieSubscription>() => T;
  showType: () => Promise<AsyncIterator<String>>;
}

export interface ShowNullablePromise
  extends Promise<Show | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  movie: <T = MoviePromise>() => T;
  showType: () => Promise<String>;
}

export interface ShowConnection {
  pageInfo: PageInfo;
  edges: ShowEdge[];
}

export interface ShowConnectionPromise
  extends Promise<ShowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShowEdge>>() => T;
  aggregate: <T = AggregateShowPromise>() => T;
}

export interface ShowConnectionSubscription
  extends Promise<AsyncIterator<ShowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShowSubscription>() => T;
}

export interface ShowEdge {
  node: Show;
  cursor: String;
}

export interface ShowEdgePromise extends Promise<ShowEdge>, Fragmentable {
  node: <T = ShowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShowEdgeSubscription
  extends Promise<AsyncIterator<ShowEdge>>,
    Fragmentable {
  node: <T = ShowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShow {
  count: Int;
}

export interface AggregateShowPromise
  extends Promise<AggregateShow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShowSubscription
  extends Promise<AsyncIterator<AggregateShow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ticket {
  id: ID_Output;
  price: Float;
}

export interface TicketPromise extends Promise<Ticket>, Fragmentable {
  id: () => Promise<ID_Output>;
  show: <T = ShowPromise>() => T;
  room: <T = RoomPromise>() => T;
  seat: <T = SeatPromise>() => T;
  price: () => Promise<Float>;
}

export interface TicketSubscription
  extends Promise<AsyncIterator<Ticket>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  show: <T = ShowSubscription>() => T;
  room: <T = RoomSubscription>() => T;
  seat: <T = SeatSubscription>() => T;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface TicketNullablePromise
  extends Promise<Ticket | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  show: <T = ShowPromise>() => T;
  room: <T = RoomPromise>() => T;
  seat: <T = SeatPromise>() => T;
  price: () => Promise<Float>;
}

export interface TicketConnection {
  pageInfo: PageInfo;
  edges: TicketEdge[];
}

export interface TicketConnectionPromise
  extends Promise<TicketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TicketEdge>>() => T;
  aggregate: <T = AggregateTicketPromise>() => T;
}

export interface TicketConnectionSubscription
  extends Promise<AsyncIterator<TicketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TicketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTicketSubscription>() => T;
}

export interface TicketEdge {
  node: Ticket;
  cursor: String;
}

export interface TicketEdgePromise extends Promise<TicketEdge>, Fragmentable {
  node: <T = TicketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TicketEdgeSubscription
  extends Promise<AsyncIterator<TicketEdge>>,
    Fragmentable {
  node: <T = TicketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTicket {
  count: Int;
}

export interface AggregateTicketPromise
  extends Promise<AggregateTicket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTicketSubscription
  extends Promise<AsyncIterator<AggregateTicket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActorSubscriptionPayload {
  mutation: MutationType;
  node: Actor;
  updatedFields: String[];
  previousValues: ActorPreviousValues;
}

export interface ActorSubscriptionPayloadPromise
  extends Promise<ActorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActorPreviousValuesPromise>() => T;
}

export interface ActorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActorPreviousValuesSubscription>() => T;
}

export interface ActorPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ActorPreviousValuesPromise
  extends Promise<ActorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ActorPreviousValuesSubscription
  extends Promise<AsyncIterator<ActorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DirectorSubscriptionPayload {
  mutation: MutationType;
  node: Director;
  updatedFields: String[];
  previousValues: DirectorPreviousValues;
}

export interface DirectorSubscriptionPayloadPromise
  extends Promise<DirectorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DirectorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DirectorPreviousValuesPromise>() => T;
}

export interface DirectorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DirectorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DirectorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DirectorPreviousValuesSubscription>() => T;
}

export interface DirectorPreviousValues {
  id: ID_Output;
  name: String;
}

export interface DirectorPreviousValuesPromise
  extends Promise<DirectorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DirectorPreviousValuesSubscription
  extends Promise<AsyncIterator<DirectorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MovieSubscriptionPayload {
  mutation: MutationType;
  node: Movie;
  updatedFields: String[];
  previousValues: MoviePreviousValues;
}

export interface MovieSubscriptionPayloadPromise
  extends Promise<MovieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoviePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoviePreviousValuesPromise>() => T;
}

export interface MovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoviePreviousValuesSubscription>() => T;
}

export interface MoviePreviousValues {
  id: ID_Output;
  title: String;
  year: Int;
  summary: String;
  gender: String;
  class: String;
}

export interface MoviePreviousValuesPromise
  extends Promise<MoviePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<Int>;
  summary: () => Promise<String>;
  gender: () => Promise<String>;
  class: () => Promise<String>;
}

export interface MoviePreviousValuesSubscription
  extends Promise<AsyncIterator<MoviePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  summary: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  class: () => Promise<AsyncIterator<String>>;
}

export interface PurchaseSubscriptionPayload {
  mutation: MutationType;
  node: Purchase;
  updatedFields: String[];
  previousValues: PurchasePreviousValues;
}

export interface PurchaseSubscriptionPayloadPromise
  extends Promise<PurchaseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PurchasePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PurchasePreviousValuesPromise>() => T;
}

export interface PurchaseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PurchaseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PurchaseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PurchasePreviousValuesSubscription>() => T;
}

export interface PurchasePreviousValues {
  id: ID_Output;
  numTickets: Int;
  total: Float;
}

export interface PurchasePreviousValuesPromise
  extends Promise<PurchasePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  numTickets: () => Promise<Int>;
  total: () => Promise<Float>;
}

export interface PurchasePreviousValuesSubscription
  extends Promise<AsyncIterator<PurchasePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  numTickets: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Float>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  id: ID_Output;
  roomType: String;
  seatNum: Int;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  roomType: () => Promise<String>;
  seatNum: () => Promise<Int>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  roomType: () => Promise<AsyncIterator<String>>;
  seatNum: () => Promise<AsyncIterator<Int>>;
}

export interface SeatSubscriptionPayload {
  mutation: MutationType;
  node: Seat;
  updatedFields: String[];
  previousValues: SeatPreviousValues;
}

export interface SeatSubscriptionPayloadPromise
  extends Promise<SeatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeatPreviousValuesPromise>() => T;
}

export interface SeatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeatPreviousValuesSubscription>() => T;
}

export interface SeatPreviousValues {
  id: ID_Output;
  available: Boolean;
}

export interface SeatPreviousValuesPromise
  extends Promise<SeatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  available: () => Promise<Boolean>;
}

export interface SeatPreviousValuesSubscription
  extends Promise<AsyncIterator<SeatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  available: () => Promise<AsyncIterator<Boolean>>;
}

export interface ShowSubscriptionPayload {
  mutation: MutationType;
  node: Show;
  updatedFields: String[];
  previousValues: ShowPreviousValues;
}

export interface ShowSubscriptionPayloadPromise
  extends Promise<ShowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShowPreviousValuesPromise>() => T;
}

export interface ShowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShowPreviousValuesSubscription>() => T;
}

export interface ShowPreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  showType: String;
}

export interface ShowPreviousValuesPromise
  extends Promise<ShowPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  showType: () => Promise<String>;
}

export interface ShowPreviousValuesSubscription
  extends Promise<AsyncIterator<ShowPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  showType: () => Promise<AsyncIterator<String>>;
}

export interface TicketSubscriptionPayload {
  mutation: MutationType;
  node: Ticket;
  updatedFields: String[];
  previousValues: TicketPreviousValues;
}

export interface TicketSubscriptionPayloadPromise
  extends Promise<TicketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TicketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TicketPreviousValuesPromise>() => T;
}

export interface TicketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TicketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TicketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TicketPreviousValuesSubscription>() => T;
}

export interface TicketPreviousValues {
  id: ID_Output;
  price: Float;
}

export interface TicketPreviousValuesPromise
  extends Promise<TicketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
}

export interface TicketPreviousValuesSubscription
  extends Promise<AsyncIterator<TicketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password?: String;
  name: String;
  cardNumber: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  cardNumber: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  cardNumber: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Actor",
    embedded: false
  },
  {
    name: "Director",
    embedded: false
  },
  {
    name: "Movie",
    embedded: false
  },
  {
    name: "Purchase",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "RoomType",
    embedded: false
  },
  {
    name: "Seat",
    embedded: false
  },
  {
    name: "Show",
    embedded: false
  },
  {
    name: "ShowType",
    embedded: false
  },
  {
    name: "Ticket",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["URL_BASE"]}/default/${process.env["ENVIRONMENT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
